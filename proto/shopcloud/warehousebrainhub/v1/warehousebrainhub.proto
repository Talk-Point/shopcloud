// WarehouseBrainHub API
// To access the erp

syntax = "proto3";

package proto.shopcloud.warehousebrainhub.v1;

import "google/protobuf/timestamp.proto";

// Generic
enum Operator {
    OPERATOR_EQUAL_UNSPECIFIED = 0;
    // OPERATOR_NOT_EQUAL = 1;
    OPERATOR_GREATER_THAN = 2;
    OPERATOR_GREATER_THAN_OR_EQUAL = 3;
    OPERATOR_LESS_THAN = 4;
    OPERATOR_LESS_THAN_OR_EQUAL = 5;
    // OPERATOR_IN = 6;
    // OPERATOR_NOT_IN = 7;
    // OPERATOR_LIKE = 8;
    // OPERATOR_NOT_LIKE = 9;
    // OPERATOR_IS_NULL = 10;
    // OPERATOR_IS_NOT_NULL = 11;
    OPERATOR_CONTAINS = 12;
    OPERATOR_ARRAY_CONTAINS = 13;
}

enum Direction {
    DIRECTION_ASC_UNSPECIFIED = 0;
    DIRECTION_DESC = 1;
}

// Scopes
enum Scope {
    SCOPE_UNSPECIFIED = 0;
    SCOPE_READ = 1;
    SCOPE_WRITE = 2;
    SCOPE_ADMIN = 3;
}

// Models
message ApiKey {
    string id = 1;
    string username = 2;
    string email = 3;
    repeated Scope scopes = 4;
    string secret = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message Article {
    enum Status {
        STATUS_UNSPECIFIED = 0; // keine klassifizierung hat stattgefunden
        STATUS_ACTIVE = 1; // er würde aktiv algorithmen anwenden
        STATUS_INACTIVE = 2;
        STATUS_BLACKLISTED = 3; // er würde auf die blacklist gesetzt
        STATUS_PRECONDITION_FAILED = 4;
    }
    enum Algorithm {
        ALGORITHM_UNSPECIFIED = 0;
        ALGORITHM_BESTPREIS = 1;
        ALGORITHM_AUSVERKAUF_50 = 2;
        ALGORITHM_AUSVERKAUF_100 = 3;
        ALGORITHM_BESTPREIS_UP = 4;
    }

    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    string matchcode = 4;
    string hersteller = 5;
    double lagerbestand = 6; 
    string artikelgruppe = 7;
    int32 steuerklasse = 8;
    double mittlerer_ek = 9; 
    double letzter_ek = 10; 
    double lager_total_ek = 11;
    google.protobuf.Timestamp last_update_core_data_at = 12;
    double price_2 = 13; 
    double price_3 = 14; 
    double price_6 = 15;
    google.protobuf.Timestamp last_update_price_data_at = 16;
    bool online_amz = 17; 
    bool online_ebay = 18; 
    bool online_shop = 19; 
    google.protobuf.Timestamp last_update_online_data_at = 20;
    string move_first_add = 21;
    string move_last_add = 22;
    string move_last_move = 23;
    string move_last_out = 24;
    google.protobuf.Timestamp last_update_move_data_at = 25;
    string beleg_last_order_at = 26;
    string beleg_last_invoice_at = 27;
    google.protobuf.Timestamp last_update_beleg_data_at = 28;
    string last_check_at = 29;
    string last_check_by = 30;
    Status status = 31;
    google.protobuf.Timestamp last_status_check_at = 32;
    google.protobuf.Timestamp last_status_change_at = 33;
    Algorithm algorithm = 34;
    google.protobuf.Timestamp last_algorithm_change_at = 35;
    google.protobuf.Timestamp created_at = 36;
    google.protobuf.Timestamp updated_at = 37;
}

message ArticleStatusChanged {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    Article.Status status = 4;
}

message ArticleAlgorithmChanged {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    Article.Algorithm algorithm = 4;
}

message ArticlePriceChanged {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    map<int32, double> prices = 4; // price_list => price
}

enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    EVENT_TYPE_STATUS_CHANGED = 1;
    EVENT_TYPE_ARTICLE_ALGORITHM_CHANGED = 2;
    EVENT_TYPE_ARTICLE_PRICE_CHANGED = 3;
}

message Event {
    EventType name = 1;
    string reference = 2;
    string by = 3;
    google.protobuf.Timestamp created_at = 4;
    oneof payload {
        ArticleStatusChanged article_status_changed = 5;
        ArticleAlgorithmChanged article_algorithm_changed = 6;
        ArticlePriceChanged article_price_changed = 7;
    }
}

service WarehouseBrainHubService {
    // Info
    rpc Info(InfoRequest) returns (InfoResponse);

    // APIKeys
    rpc GetApiKey(GetApiKeyRequest) returns (GetApiKeyResponse);
    rpc ListApiKeys(ListApiKeysRequest) returns (ListApiKeysResponse);
    rpc CreateApiKey(CreateApiKeyRequest) returns (CreateApiKeyResponse);
    rpc DeleteApiKey(DeleteApiKeyRequest) returns (DeleteApiKeyResponse);
    rpc UpdateScopesByApiKey(UpdateScopesByApiKeyRequest) returns (UpdateScopesByApiKeyResponse);

    // Articles
    rpc CreateArticle(CreateArticleRequest) returns (CreateArticleResponse);
    rpc ListArticles(ListArticlesRequest) returns (ListArticlesResponse);
    rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse);
    rpc SyncArticleWithErp(SyncArticleWithErpRequest) returns (SyncArticleWithErpResponse);
    rpc MarkAsChecked(MarkAsCheckedRequest) returns (MarkAsCheckedResponse);
    rpc UnmarkAsChecked(MarkAsCheckedRequest) returns (MarkAsCheckedResponse);
    // Set Status
    // - set the status of the product, to activate it for warehousebrain
    rpc SetStatusForArticle(SetStatusForArticleRequest) returns (SetStatusForArticleResponse);
    // Check Status
    // - check if the product has a sales opportunity and then set the status to active
    rpc CheckStatusForArticle(CheckStatusForArticleRequest) returns (CheckStatusForArticleResponse);
    // Set Algorithm
    // - set the algorithm for the product, to activate the price manipulation
    rpc SetAlgorithmusForArticle(SetAlgorithmusForArticleRequest) returns (SetAlgorithmusForArticleResponse);
    // Reset Algorithm
    // - when the the product has a sale reset the price algorithm
    rpc ResetArticleAlgorithmWhenSaledOrEmpty(ResetArticleAlgorithmWhenSaledOrEmptyRequest) returns (ResetArticleAlgorithmWhenSaledOrEmptyResponse);
    rpc RunPriceAdjustments(RunPriceAdjustmentsRequest) returns (RunPriceAdjustmentsResponse);
    rpc BroadcastPriceUpdates(BroadcastPriceUpdatesRequest) returns (BroadcastPriceUpdatesResponse);
}

message RunPriceAdjustmentsRequest {
    int32 mandant = 1;
}

message RunPriceAdjustmentsResponse {
    repeated string references = 1;
}

message BroadcastPriceUpdatesRequest {
    repeated string references = 1;
}

message BroadcastPriceUpdatesResponse {
    repeated string references = 1;
}

message ResetArticleAlgorithmWhenSaledOrEmptyRequest {
    int32 mandant = 1;
}

message ResetArticleAlgorithmWhenSaledOrEmptyResponse {
    repeated string references = 1;
}

message CreateArticleRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    string matchcode = 4;
    string hersteller = 5;
    double lagerbestand = 6; 
    string artikelgruppe = 7;
    double mittlerer_ek = 8; 
    double letzter_ek = 9; 
    double lager_total_ek = 10;
    google.protobuf.Timestamp last_update_core_data_at = 11;
    double price_2 = 12; 
    double price_3 = 13; 
    double price_6 = 14;
    google.protobuf.Timestamp last_update_price_data_at = 15;
    bool online_amz = 16; 
    bool online_ebay = 17; 
    bool online_shop = 18; 
    google.protobuf.Timestamp last_update_online_data_at = 19;
    string move_first_add = 20;
    string move_last_add = 21;
    string move_last_move = 22;
    string move_last_out = 23;
    google.protobuf.Timestamp last_update_move_data_at = 24;
    string beleg_last_order_at = 25;
    string beleg_last_invoice_at = 26;
    google.protobuf.Timestamp last_update_beleg_data_at = 27;
    string last_check_at = 28;
    string last_check_by = 29;
    Article.Status status = 30;
    google.protobuf.Timestamp last_status_check_at = 31;
    google.protobuf.Timestamp last_status_change_at = 32;
    Article.Algorithm algorithm = 33;
    google.protobuf.Timestamp last_algorithm_change_at = 34;
}

message CreateArticleResponse {
    Article article = 1;
}

message CheckStatusForArticleRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
}

message CheckStatusForArticleResponse {
    Article.Status status = 1;
    string reson = 2;
}

message SetStatusForArticleRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    Article.Status status = 4;
    string by = 5;
}

message SetStatusForArticleResponse {
    Article article = 1;
}

message SetAlgorithmusForArticleRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    Article.Algorithm algorithm = 4;
    string by = 5;
}

message SetAlgorithmusForArticleResponse {
    Article article = 1;
}

message UnmarkAsCheckedRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    string by = 4;
}

message UnmarkAsCheckedResponse {
    Article article = 1;
}

message MarkAsCheckedRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
    string by = 4;
}

message MarkAsCheckedResponse {
    Article article = 1;
}

enum SyncType {
    SYNC_TYPE_UNSPECIFIED = 0;
    SYNC_TYPE_CORE = 1;
    SYNC_TYPE_PRICES = 2;
    SYNC_TYPE_MOVEMENTS = 3;
    SYNC_TYPE_BELEG = 4;
}

message SyncArticleWithErpRequest {
    SyncType sync_type = 1;
    repeated string references = 2;
}

message SyncError {
    string reference = 1;
    string message = 2;
}

message SyncArticleWithErpResponse {
    repeated string references = 1;
    repeated SyncError errors = 2;
}

message DeleteArticleRequest {
    string id = 1;
}

message DeleteArticleResponse {
    Article article = 1;
}

message GetArticleRequest {
    int32 mandant = 1;
    string artikelnummer = 2;
    int64 auspraegung_id = 3;
}

message GetArticleResponse {
    Article article = 1;
}

message ListArticlesRequest {
    int32 page = 1;
    int32 page_size = 2;
    string filter_query = 3;
    bool debug = 4;
}

message ListArticlesResponse {
    repeated Article articles = 1;
    int32 page = 2;
    int32 page_size = 3;
    repeated string queries = 4;
}

message GetApiKeyRequest {
    string id = 1;
}

message GetApiKeyResponse {
    ApiKey api_key = 1;
}

message ListApiKeysFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_USERNAME = 1;
        FIELD_EMAIL = 2;
        FIELD_SECRET = 3;
        FIELD_BY_USER_NAME = 4;
        FIELD_CREATED_AT = 5;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListApiKeysRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_CREATED_AT = 1;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListApiKeysFilter filters = 6;
}

message ListApiKeysResponse {
    repeated ApiKey api_keys = 1;
    string page_token = 2;
}

message CreateApiKeyRequest {
    string username = 1;
    string email = 2;
    repeated Scope scopes = 3;
}

message CreateApiKeyResponse {
    ApiKey api_key = 1;
}

message DeleteApiKeyRequest {
    string id = 1;
}

message DeleteApiKeyResponse {
    ApiKey api_key = 1;
}

message UpdateScopesByApiKeyRequest {
    string id = 1;
    repeated string scopes = 2;
}

message UpdateScopesByApiKeyResponse {
    ApiKey api_key = 1;
}

message InfoRequest {}

message InfoResponse {
    string version = 1;
}