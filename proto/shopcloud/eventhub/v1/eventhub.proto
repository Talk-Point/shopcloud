// EventHub API
// The EventHub API is used to publish events to the correct topic and endpoint.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package proto.shopcloud.eventhub.v1;

option go_package="github.com/Talk-Point/shopcloud/proto/shopcloud/eventhub/v1";

// Generic
enum Operator {
    OPERATOR_EQUAL_UNSPECIFIED = 0;
    // OPERATOR_NOT_EQUAL = 1;
    OPERATOR_GREATER_THAN = 2;
    OPERATOR_GREATER_THAN_OR_EQUAL = 3;
    OPERATOR_LESS_THAN = 4;
    OPERATOR_LESS_THAN_OR_EQUAL = 5;
    // OPERATOR_IN = 6;
    // OPERATOR_NOT_IN = 7;
    // OPERATOR_LIKE = 8;
    // OPERATOR_NOT_LIKE = 9;
    // OPERATOR_IS_NULL = 10;
    // OPERATOR_IS_NOT_NULL = 11;
    OPERATOR_CONTAINS = 12;
    OPERATOR_ARRAY_CONTAINS = 13;
}

enum Direction {
    DIRECTION_ASC_UNSPECIFIED = 0;
    DIRECTION_DESC = 1;
}

// Workspace represents a collection of topics and subscriptions
message Workspace {
    string id = 1;
    string name = 2;
    string environment = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
}

// Represents an event that is published to a topic.
message Event {
    string id = 1;
    string workspace = 2;
    string topic = 3;
    string payload = 4;
    bool is_payload_valid = 5;
    google.protobuf.Timestamp ttl = 6;
    repeated string tags = 7;
    string gateway = 8;
    string gateway_value = 9;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
}

message Subscription {
    string id = 1;
    string name = 2;
    string workspace = 3;
    string status = 4;
    bool is_active = 5;
    bool is_paused = 6;
    repeated string topics = 7;
    string endpoint = 8;
    string auth = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
}

message Delivery {
    enum Status {
        STATUS_PENDING_UNSPECIFIED = 0;
        STATUS_DELIVERED = 1;
        STATUS_FAILED = 2;
    }

    string id = 1;
    string workspace = 2;
    string event = 3;
    string topic = 4;
    string subscription = 5;
    string subscription_value = 6;
    Status status = 7;
    int32 retry_count = 8;
    string last_status = 9;
    google.protobuf.Timestamp ttl = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
}

message Gateway {
    string id = 1;
    string workspace = 2;
    string name = 3;
    string code = 4;
    string hash = 5;
    string topic = 6;
    string auth = 7;
    bool is_active = 8;
    google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
}

// The EventHub service definition.
// EventHub Service API receive Events and publish them to the correct topic thats received by the endpoint.
//
// - PublishEvent: Publish an event to a topic and create a event object
// - DispatchEventToSubscriptions: Load the Subscriptions and create the Delivery objects
// - PushDelivery: Push the Delivery to the endpoint
service EventHubDispatcherService {
    // Info
    rpc Info(InfoRequest) returns (InfoResponse);

    // Workspace
    rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse);
    rpc GetWorkspaceByName(GetWorkspaceByNameRequest) returns (GetWorkspaceByNameResponse);
    rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse);
    rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
    rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse);
    rpc GetOrCreateWorkspace(GetOrCreateWorkspaceRequest) returns (GetOrCreateWorkspaceResponse);
    // rpc AddUsersToWorkspace(AddUsersToWorkspaceRequest) returns (AddUsersToWorkspaceResponse);
    // rpc RemoveUsersFromWorkspace(RemoveUsersFromWorkspaceRequest) returns (RemoveUsersFromWorkspaceResponse);

    // Event
    rpc PublishEvent(PublishEventRequest) returns (PublishEventResponse);
    rpc DispatchEventToSubscriptions(DispatchEventToSubscriptionsRequest) returns (DispatchEventToSubscriptionsResponse);
    rpc GetEvent(GetEventRequest) returns (GetEventResponse);
    rpc ListEvents(ListEventsRequest) returns (ListEventsResponse);

    // Subscription
    rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse);
    rpc GetSubscriptionByName(GetSubscriptionByNameRequest) returns (GetSubscriptionByNameResponse);
    rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);
    rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse);
    rpc GetOrCreateSubscription(GetOrCreateSubscriptionRequest) returns (GetOrCreateSubscriptionResponse);
    rpc AddSubscriptionTopics(AddSubscriptionTopicsRequest) returns (AddSubscriptionTopicsResponse);
    rpc RemoveSubscriptionTopics(RemoveSubscriptionTopicsRequest) returns (RemoveSubscriptionTopicsResponse);
    rpc SetSubscriptionTopics(SetSubscriptionTopicsRequest) returns (SetSubscriptionTopicsResponse);
    rpc ActivateSubscription(ActivateSubscriptionRequest) returns (ActivateSubscriptionResponse);
    rpc DeactivateSubscription(DeactivateSubscriptionRequest) returns (DeactivateSubscriptionResponse);
    rpc PauseSubscription(PauseSubscriptionRequest) returns (PauseSubscriptionResponse);
    rpc ResumeSubscription(ResumeSubscriptionRequest) returns (ResumeSubscriptionResponse);
    rpc SetAuthSubscription(SetAuthSubscriptionRequest) returns (SetAuthSubscriptionResponse);

    // Delivery
    rpc GetDelivery(GetDeliveryRequest) returns (GetDeliveryResponse);
    rpc ListDeliveries(ListDeliveriesRequest) returns (ListDeliveriesResponse);
    rpc CreateDelivery(CreateDeliveryRequest) returns (CreateDeliveryResponse);
    rpc DeleteDelivery(DeleteDeliveryRequest) returns (DeleteDeliveryResponse);
    rpc PushDelivery(PushDeliveryRequest) returns (PushDeliveryResponse);

    // Gateway
    rpc GetGateway(GetGatewayRequest) returns (GetGatewayResponse);
    rpc GetGatewayByCode(GetGatewayByCodeRequest) returns (GetGatewayByCodeResponse);
    rpc GetGatewayByHash(GetGatewayByHashRequest) returns (GetGatewayByHashResponse);
    rpc ListGateways(ListGatewaysRequest) returns (ListGatewaysResponse);
    rpc CreateGateway(CreateGatewayRequest) returns (CreateGatewayResponse);
    rpc DeleteGateway(DeleteGatewayRequest) returns (DeleteGatewayResponse);
    rpc GetOrCreateGateway(GetOrCreateGatewayRequest) returns (GetOrCreateGatewayResponse);
    rpc PublishToGateway(PublishToGatewayRequest) returns (PublishToGatewayResponse);
}

message BasicAuth {
    string username = 1;
    string password = 2;
}

message TokenAuth {
    string header = 1;
    string token = 2;
}

message SetAuthSubscriptionRequest {
    string id = 1;
    oneof auth_method {
        BasicAuth basic_auth = 2;
        TokenAuth token_auth = 3;
    }
}

message SetAuthSubscriptionResponse {
    Subscription subscription = 1;
}

message GetEventResponse {
    Event event = 1;
}

message InfoRequest {}

message InfoResponse {
    string version = 1;
}

message ListEventsFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_WORKSPACE = 1;
        FIELD_TOPIC = 2;
        FIELD_GATEWAY = 3;
        FIELD_IS_PAYLOAD_VALID = 4;
        FIELD_CREATED_AT = 5;
        FIELD_UPDATED_AT = 6;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListEventsRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_CREATED_AT = 1;
        ORDER_BY_UPDATED_AT = 2;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListEventsFilter filters = 6;
}

message ListEventsResponse {
    repeated Event events = 1;
    string page_token = 2;
}

message GetGatewayByHashRequest {
    string hash = 1;
}

message GetGatewayByHashResponse {
    Gateway gateway = 1;
}

message GetGatewayRequest {
    string id = 1;
}

message GetGatewayResponse {
    Gateway gateway = 1;
}

message GetGatewayByCodeRequest {
    string code = 1;
    string workspace = 2;
}

message GetGatewayByCodeResponse {
    Gateway gateway = 1;
}

message ListGatewaysFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_WORKSPACE = 1;
        FIELD_NAME = 2;
        FIELD_TOPIC = 3;
        FIELD_HASH = 4;
        FIELD_CREATED_AT = 5;
        FIELD_UPDATED_AT = 6;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListGatewaysRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_NAME = 1;
        ORDER_BY_TOPIC = 2;
        ORDER_BY_CREATED_AT = 3;
        ORDER_BY_UPDATED_AT = 4;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListGatewaysFilter filters = 6;
}
message ListGatewaysResponse {
    repeated Gateway gateways = 1;
    string page_token = 2;
}

message CreateGatewayRequest {
    string name = 1;
    string workspace = 2;
    string topic = 3;
    string auth = 4;
}

message CreateGatewayResponse {
    Gateway gateway = 1;
}

message DeleteGatewayRequest {
    string id = 1;
}

message DeleteGatewayResponse {
    Gateway gateway = 1;
}

message GetOrCreateGatewayRequest {
    string name = 1;
    string workspace = 2;
    string topic = 3;
    string auth = 4;
}

message GetOrCreateGatewayResponse {
    Gateway gateway = 1;
}

message PublishToGatewayRequest {
    string hash = 1;
    string payload = 2;
}

message PublishToGatewayResponse {
    string id = 1;
}

message GetSubscriptionByNameRequest {
    string name = 1;
    string workspace = 2;
}

message GetSubscriptionByNameResponse {
    Subscription subscription = 1;
}

message GetOrCreateSubscriptionRequest {
    string name = 1;
    string workspace = 2;
    repeated string topics = 3;
    string endpoint = 4;
    string auth = 5;
}

message GetOrCreateSubscriptionResponse {
    Subscription subscription = 1;
}

message GetWorkspaceByNameRequest {
    string name = 1;
}

message GetWorkspaceByNameResponse {
    Workspace workspace = 1;
}

message GetOrCreateWorkspaceRequest {
    string name = 1;
}

message GetOrCreateWorkspaceResponse {
    Workspace workspace = 1;
}

message CreateDeliveryRequest {
    string event = 1;
    string subscription = 2;
}

message CreateDeliveryResponse {
    string id = 1;
}

message AddUsersToWorkspaceRequest {
    string id = 1;
    repeated string users = 2;
}

message AddUsersToWorkspaceResponse {
    Workspace workspace = 1;
}

message RemoveUsersFromWorkspaceRequest {
    string id = 1;
    repeated string users = 2;
}

message RemoveUsersFromWorkspaceResponse {
    Workspace workspace = 1;
}

message DispatchEventToSubscriptionsRequest {
    string event = 1;
    int32 page_size = 2;
    string page_token = 3;
}

message DispatchEventToSubscriptionsResponse {
    repeated string subscriptions = 1;
}

message GetSubscriptionRequest {
    string id = 1;
}

message GetSubscriptionResponse {
    Subscription subscription = 1;
}

message ListSubscriptionsFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_WORKSPACE = 1;
        FIELD_STATUS = 2;
        FIELD_IS_ACTIVE = 3;
        FIELD_IS_PAUSED = 4;
        FIELD_TOPCIS = 5;
        FIELD_CREATED_AT = 6;
        FIELD_UPDATED_AT = 7;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListSubscriptionsRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_NAME = 1;
        ORDER_BY_CREATED_AT = 2;
        ORDER_BY_UPDATED_AT = 3;
        ORDER_BY_TOPICS = 4;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListSubscriptionsFilter filters = 6;
}

message ListSubscriptionsResponse {
    repeated Subscription subscriptions = 1;
    string page_token = 2;
}

message CreateSubscriptionRequest {
    string name = 1;
    string workspace = 2;
    repeated string topics = 3;
    string endpoint = 4;
}

message CreateSubscriptionResponse {
    Subscription subscription = 1;
}

message DeleteSubscriptionRequest {
    string id = 1;
}

message DeleteSubscriptionResponse {
    Subscription subscription = 1;
}

message AddSubscriptionTopicsRequest {
    string id = 1;
    repeated string topics = 2;
}

message AddSubscriptionTopicsResponse {
    Subscription subscription = 1;
}

message RemoveSubscriptionTopicsRequest {
    string id = 1;
    repeated string topics = 2;
}

message RemoveSubscriptionTopicsResponse {
    Subscription subscription = 1;
}

message SetSubscriptionTopicsRequest {
    string id = 1;
    repeated string topics = 2;
}

message SetSubscriptionTopicsResponse {
    Subscription subscription = 1;
}

message ActivateSubscriptionRequest {
    string id = 1;
}

message ActivateSubscriptionResponse {
    Subscription subscription = 1;
}

message DeactivateSubscriptionRequest {
    string id = 1;
}

message DeactivateSubscriptionResponse {
    Subscription subscription = 1;
}

message PauseSubscriptionRequest {
    string id = 1;
}

message PauseSubscriptionResponse {
    Subscription subscription = 1;
}

message ResumeSubscriptionRequest {
    string id = 1;
}

message ResumeSubscriptionResponse {
    Subscription subscription = 1;
}

message GetDeliveryRequest {
    string id = 1;
}

message GetDeliveryResponse {
    Delivery delivery = 1;
}

message ListDeliveriesFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_WORKSPACE = 1;
        FIELD_EVENT = 2;
        FIELD_SUBSCRIPTION = 3;
        FIELD_TOPIC = 4;
        FIELD_STATUS = 5;
        FIELD_CREATED_AT = 6;
        FIELD_UPDATED_AT = 7;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListDeliveriesRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_NAME = 1;
        ORDER_BY_CREATED_AT = 2;
        ORDER_BY_UPDATED_AT = 3;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListDeliveriesFilter filters = 6;
}

message ListDeliveriesResponse {
    repeated Delivery deliveries = 1;
    string page_token = 2;
}

message DeleteDeliveryRequest {
    string id = 1;
}

message DeleteDeliveryResponse {
    Delivery delivery = 1;
}

message PushDeliveryRequest {
    string id = 1;
}

message PushDeliveryResponse {
    bool is_success = 1;
}

message GetWorkspaceRequest {
    string id = 1;
}

message GetWorkspaceResponse {
    Workspace workspace = 1;
}

message ListWorkspacesFilter {
    enum Field {
        FIELD_ID_UNSPECIFIED = 0;
        FIELD_NAME = 1;
        FIELD_ENVIRONMENT = 2;
        FIELD_CREATED_AT = 3;
        FIELD_UPDATED_AT = 4;
    }

    Field field = 1;
    string value = 2;
    Operator operator = 3;
}

message ListWorkspacesRequest {
    enum OrderBy {
        ORDER_BY_ID_UNSPECIFIED = 0;
        ORDER_BY_NAME = 1;
        ORDER_BY_ENVIRONMENT = 2;
        ORDER_BY_CREATED_AT = 3;
        ORDER_BY_UPDATED_AT = 4;
    }

    int32 page_size = 1;
    string page_next = 2;
    string page_previous = 3;
    OrderBy order_by = 4;
    Direction direction = 5;
    repeated ListWorkspacesFilter filters = 6;
}

message ListWorkspacesResponse {
    repeated Workspace workspaces = 1;
    string page_token = 2;
}

message CreateWorkspaceRequest {
    string name = 1;
}

message CreateWorkspaceResponse {
    Workspace workspace = 1;
}

message PublishEventRequest {
    string workspace = 1;
    string topic = 2;
    string payload = 3;
}

message PublishEventResponse {
    string id = 1;
}

message GetEventRequest {
    string id = 1;
}

message DeleteWorkspaceRequest {
    string id = 1;
}

message DeleteWorkspaceResponse {
    Workspace workspace = 1;
}