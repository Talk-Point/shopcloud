// EventHub API
// The EventHub API is used to publish events to the correct topic and endpoint.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/shopcloud/eventhub/v1/eventhub.proto

package eventhubv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Talk-Point/shopcloud/gen/proto/shopcloud/eventhub/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventHubDispatcherServiceName is the fully-qualified name of the EventHubDispatcherService
	// service.
	EventHubDispatcherServiceName = "proto.shopcloud.eventhub.v1.EventHubDispatcherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventHubDispatcherServiceGetWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetWorkspace RPC.
	EventHubDispatcherServiceGetWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetWorkspace"
	// EventHubDispatcherServiceGetWorkspaceByNameProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetWorkspaceByName RPC.
	EventHubDispatcherServiceGetWorkspaceByNameProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetWorkspaceByName"
	// EventHubDispatcherServiceListWorkspacesProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ListWorkspaces RPC.
	EventHubDispatcherServiceListWorkspacesProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ListWorkspaces"
	// EventHubDispatcherServiceCreateWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's CreateWorkspace RPC.
	EventHubDispatcherServiceCreateWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/CreateWorkspace"
	// EventHubDispatcherServiceDeleteWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DeleteWorkspace RPC.
	EventHubDispatcherServiceDeleteWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DeleteWorkspace"
	// EventHubDispatcherServiceGetOrCreateWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetOrCreateWorkspace RPC.
	EventHubDispatcherServiceGetOrCreateWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetOrCreateWorkspace"
	// EventHubDispatcherServiceAddUsersToWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's AddUsersToWorkspace RPC.
	EventHubDispatcherServiceAddUsersToWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/AddUsersToWorkspace"
	// EventHubDispatcherServiceRemoveUsersFromWorkspaceProcedure is the fully-qualified name of the
	// EventHubDispatcherService's RemoveUsersFromWorkspace RPC.
	EventHubDispatcherServiceRemoveUsersFromWorkspaceProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/RemoveUsersFromWorkspace"
	// EventHubDispatcherServicePublishEventProcedure is the fully-qualified name of the
	// EventHubDispatcherService's PublishEvent RPC.
	EventHubDispatcherServicePublishEventProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/PublishEvent"
	// EventHubDispatcherServiceDispatchEventToSubscriptionsProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DispatchEventToSubscriptions RPC.
	EventHubDispatcherServiceDispatchEventToSubscriptionsProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DispatchEventToSubscriptions"
	// EventHubDispatcherServiceGetEventProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetEvent RPC.
	EventHubDispatcherServiceGetEventProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetEvent"
	// EventHubDispatcherServiceGetSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetSubscription RPC.
	EventHubDispatcherServiceGetSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetSubscription"
	// EventHubDispatcherServiceGetSubscriptionByNameProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetSubscriptionByName RPC.
	EventHubDispatcherServiceGetSubscriptionByNameProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetSubscriptionByName"
	// EventHubDispatcherServiceListSubscriptionsProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ListSubscriptions RPC.
	EventHubDispatcherServiceListSubscriptionsProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ListSubscriptions"
	// EventHubDispatcherServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's CreateSubscription RPC.
	EventHubDispatcherServiceCreateSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/CreateSubscription"
	// EventHubDispatcherServiceDeleteSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DeleteSubscription RPC.
	EventHubDispatcherServiceDeleteSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DeleteSubscription"
	// EventHubDispatcherServiceGetOrCreateSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetOrCreateSubscription RPC.
	EventHubDispatcherServiceGetOrCreateSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetOrCreateSubscription"
	// EventHubDispatcherServiceAddSubscriptionTopicsProcedure is the fully-qualified name of the
	// EventHubDispatcherService's AddSubscriptionTopics RPC.
	EventHubDispatcherServiceAddSubscriptionTopicsProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/AddSubscriptionTopics"
	// EventHubDispatcherServiceRemoveSubscriptionTopicsProcedure is the fully-qualified name of the
	// EventHubDispatcherService's RemoveSubscriptionTopics RPC.
	EventHubDispatcherServiceRemoveSubscriptionTopicsProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/RemoveSubscriptionTopics"
	// EventHubDispatcherServiceSetSubscriptionTopicsProcedure is the fully-qualified name of the
	// EventHubDispatcherService's SetSubscriptionTopics RPC.
	EventHubDispatcherServiceSetSubscriptionTopicsProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/SetSubscriptionTopics"
	// EventHubDispatcherServiceActivateSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ActivateSubscription RPC.
	EventHubDispatcherServiceActivateSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ActivateSubscription"
	// EventHubDispatcherServiceDeactivateSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DeactivateSubscription RPC.
	EventHubDispatcherServiceDeactivateSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DeactivateSubscription"
	// EventHubDispatcherServicePauseSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's PauseSubscription RPC.
	EventHubDispatcherServicePauseSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/PauseSubscription"
	// EventHubDispatcherServiceResumeSubscriptionProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ResumeSubscription RPC.
	EventHubDispatcherServiceResumeSubscriptionProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ResumeSubscription"
	// EventHubDispatcherServiceGetDeliveryProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetDelivery RPC.
	EventHubDispatcherServiceGetDeliveryProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetDelivery"
	// EventHubDispatcherServiceListDeliveriesProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ListDeliveries RPC.
	EventHubDispatcherServiceListDeliveriesProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ListDeliveries"
	// EventHubDispatcherServiceCreateDeliveryProcedure is the fully-qualified name of the
	// EventHubDispatcherService's CreateDelivery RPC.
	EventHubDispatcherServiceCreateDeliveryProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/CreateDelivery"
	// EventHubDispatcherServiceDeleteDeliveryProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DeleteDelivery RPC.
	EventHubDispatcherServiceDeleteDeliveryProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DeleteDelivery"
	// EventHubDispatcherServicePushDeliveryProcedure is the fully-qualified name of the
	// EventHubDispatcherService's PushDelivery RPC.
	EventHubDispatcherServicePushDeliveryProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/PushDelivery"
	// EventHubDispatcherServiceGetGatewayProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetGateway RPC.
	EventHubDispatcherServiceGetGatewayProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetGateway"
	// EventHubDispatcherServiceGetGatewayByCodeProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetGatewayByCode RPC.
	EventHubDispatcherServiceGetGatewayByCodeProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetGatewayByCode"
	// EventHubDispatcherServiceGetGatewayByHashProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetGatewayByHash RPC.
	EventHubDispatcherServiceGetGatewayByHashProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetGatewayByHash"
	// EventHubDispatcherServiceListGatewaysProcedure is the fully-qualified name of the
	// EventHubDispatcherService's ListGateways RPC.
	EventHubDispatcherServiceListGatewaysProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/ListGateways"
	// EventHubDispatcherServiceCreateGatewayProcedure is the fully-qualified name of the
	// EventHubDispatcherService's CreateGateway RPC.
	EventHubDispatcherServiceCreateGatewayProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/CreateGateway"
	// EventHubDispatcherServiceDeleteGatewayProcedure is the fully-qualified name of the
	// EventHubDispatcherService's DeleteGateway RPC.
	EventHubDispatcherServiceDeleteGatewayProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/DeleteGateway"
	// EventHubDispatcherServiceGetOrCreateGatewayProcedure is the fully-qualified name of the
	// EventHubDispatcherService's GetOrCreateGateway RPC.
	EventHubDispatcherServiceGetOrCreateGatewayProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/GetOrCreateGateway"
	// EventHubDispatcherServicePublishToGatewayProcedure is the fully-qualified name of the
	// EventHubDispatcherService's PublishToGateway RPC.
	EventHubDispatcherServicePublishToGatewayProcedure = "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/PublishToGateway"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventHubDispatcherServiceServiceDescriptor                            = v1.File_proto_shopcloud_eventhub_v1_eventhub_proto.Services().ByName("EventHubDispatcherService")
	eventHubDispatcherServiceGetWorkspaceMethodDescriptor                 = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetWorkspace")
	eventHubDispatcherServiceGetWorkspaceByNameMethodDescriptor           = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetWorkspaceByName")
	eventHubDispatcherServiceListWorkspacesMethodDescriptor               = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ListWorkspaces")
	eventHubDispatcherServiceCreateWorkspaceMethodDescriptor              = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("CreateWorkspace")
	eventHubDispatcherServiceDeleteWorkspaceMethodDescriptor              = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DeleteWorkspace")
	eventHubDispatcherServiceGetOrCreateWorkspaceMethodDescriptor         = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetOrCreateWorkspace")
	eventHubDispatcherServiceAddUsersToWorkspaceMethodDescriptor          = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("AddUsersToWorkspace")
	eventHubDispatcherServiceRemoveUsersFromWorkspaceMethodDescriptor     = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("RemoveUsersFromWorkspace")
	eventHubDispatcherServicePublishEventMethodDescriptor                 = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("PublishEvent")
	eventHubDispatcherServiceDispatchEventToSubscriptionsMethodDescriptor = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DispatchEventToSubscriptions")
	eventHubDispatcherServiceGetEventMethodDescriptor                     = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetEvent")
	eventHubDispatcherServiceGetSubscriptionMethodDescriptor              = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetSubscription")
	eventHubDispatcherServiceGetSubscriptionByNameMethodDescriptor        = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetSubscriptionByName")
	eventHubDispatcherServiceListSubscriptionsMethodDescriptor            = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ListSubscriptions")
	eventHubDispatcherServiceCreateSubscriptionMethodDescriptor           = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("CreateSubscription")
	eventHubDispatcherServiceDeleteSubscriptionMethodDescriptor           = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DeleteSubscription")
	eventHubDispatcherServiceGetOrCreateSubscriptionMethodDescriptor      = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetOrCreateSubscription")
	eventHubDispatcherServiceAddSubscriptionTopicsMethodDescriptor        = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("AddSubscriptionTopics")
	eventHubDispatcherServiceRemoveSubscriptionTopicsMethodDescriptor     = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("RemoveSubscriptionTopics")
	eventHubDispatcherServiceSetSubscriptionTopicsMethodDescriptor        = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("SetSubscriptionTopics")
	eventHubDispatcherServiceActivateSubscriptionMethodDescriptor         = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ActivateSubscription")
	eventHubDispatcherServiceDeactivateSubscriptionMethodDescriptor       = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DeactivateSubscription")
	eventHubDispatcherServicePauseSubscriptionMethodDescriptor            = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("PauseSubscription")
	eventHubDispatcherServiceResumeSubscriptionMethodDescriptor           = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ResumeSubscription")
	eventHubDispatcherServiceGetDeliveryMethodDescriptor                  = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetDelivery")
	eventHubDispatcherServiceListDeliveriesMethodDescriptor               = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ListDeliveries")
	eventHubDispatcherServiceCreateDeliveryMethodDescriptor               = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("CreateDelivery")
	eventHubDispatcherServiceDeleteDeliveryMethodDescriptor               = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DeleteDelivery")
	eventHubDispatcherServicePushDeliveryMethodDescriptor                 = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("PushDelivery")
	eventHubDispatcherServiceGetGatewayMethodDescriptor                   = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetGateway")
	eventHubDispatcherServiceGetGatewayByCodeMethodDescriptor             = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetGatewayByCode")
	eventHubDispatcherServiceGetGatewayByHashMethodDescriptor             = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetGatewayByHash")
	eventHubDispatcherServiceListGatewaysMethodDescriptor                 = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("ListGateways")
	eventHubDispatcherServiceCreateGatewayMethodDescriptor                = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("CreateGateway")
	eventHubDispatcherServiceDeleteGatewayMethodDescriptor                = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("DeleteGateway")
	eventHubDispatcherServiceGetOrCreateGatewayMethodDescriptor           = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("GetOrCreateGateway")
	eventHubDispatcherServicePublishToGatewayMethodDescriptor             = eventHubDispatcherServiceServiceDescriptor.Methods().ByName("PublishToGateway")
)

// EventHubDispatcherServiceClient is a client for the
// proto.shopcloud.eventhub.v1.EventHubDispatcherService service.
type EventHubDispatcherServiceClient interface {
	// Workspace
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	GetWorkspaceByName(context.Context, *connect.Request[v1.GetWorkspaceByNameRequest]) (*connect.Response[v1.GetWorkspaceByNameResponse], error)
	ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error)
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error)
	GetOrCreateWorkspace(context.Context, *connect.Request[v1.GetOrCreateWorkspaceRequest]) (*connect.Response[v1.GetOrCreateWorkspaceResponse], error)
	AddUsersToWorkspace(context.Context, *connect.Request[v1.AddUsersToWorkspaceRequest]) (*connect.Response[v1.AddUsersToWorkspaceResponse], error)
	RemoveUsersFromWorkspace(context.Context, *connect.Request[v1.RemoveUsersFromWorkspaceRequest]) (*connect.Response[v1.RemoveUsersFromWorkspaceResponse], error)
	// Event
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error)
	DispatchEventToSubscriptions(context.Context, *connect.Request[v1.DispatchEventToSubscriptionsRequest]) (*connect.Response[v1.DispatchEventToSubscriptionsResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.Event], error)
	// Subscription
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	GetSubscriptionByName(context.Context, *connect.Request[v1.GetSubscriptionByNameRequest]) (*connect.Response[v1.GetSubscriptionByNameResponse], error)
	ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error)
	GetOrCreateSubscription(context.Context, *connect.Request[v1.GetOrCreateSubscriptionRequest]) (*connect.Response[v1.GetOrCreateSubscriptionResponse], error)
	AddSubscriptionTopics(context.Context, *connect.Request[v1.AddSubscriptionTopicsRequest]) (*connect.Response[v1.AddSubscriptionTopicsResponse], error)
	RemoveSubscriptionTopics(context.Context, *connect.Request[v1.RemoveSubscriptionTopicsRequest]) (*connect.Response[v1.RemoveSubscriptionTopicsResponse], error)
	SetSubscriptionTopics(context.Context, *connect.Request[v1.SetSubscriptionTopicsRequest]) (*connect.Response[v1.SetSubscriptionTopicsResponse], error)
	ActivateSubscription(context.Context, *connect.Request[v1.ActivateSubscriptionRequest]) (*connect.Response[v1.ActivateSubscriptionResponse], error)
	DeactivateSubscription(context.Context, *connect.Request[v1.DeactivateSubscriptionRequest]) (*connect.Response[v1.DeactivateSubscriptionResponse], error)
	PauseSubscription(context.Context, *connect.Request[v1.PauseSubscriptionRequest]) (*connect.Response[v1.PauseSubscriptionResponse], error)
	ResumeSubscription(context.Context, *connect.Request[v1.ResumeSubscriptionRequest]) (*connect.Response[v1.ResumeSubscriptionResponse], error)
	// Delivery
	GetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error)
	ListDeliveries(context.Context, *connect.Request[v1.ListDeliveriesRequest]) (*connect.Response[v1.ListDeliveriesResponse], error)
	CreateDelivery(context.Context, *connect.Request[v1.CreateDeliveryRequest]) (*connect.Response[v1.CreateDeliveryResponse], error)
	DeleteDelivery(context.Context, *connect.Request[v1.DeleteDeliveryRequest]) (*connect.Response[v1.DeleteDeliveryResponse], error)
	PushDelivery(context.Context, *connect.Request[v1.PushDeliveryRequest]) (*connect.Response[v1.PushDeliveryResponse], error)
	// Gateway
	GetGateway(context.Context, *connect.Request[v1.GetGatewayRequest]) (*connect.Response[v1.GetGatewayResponse], error)
	GetGatewayByCode(context.Context, *connect.Request[v1.GetGatewayByCodeRequest]) (*connect.Response[v1.GetGatewayByCodeResponse], error)
	GetGatewayByHash(context.Context, *connect.Request[v1.GetGatewayByHashRequest]) (*connect.Response[v1.GetGatewayByHashResponse], error)
	ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error)
	CreateGateway(context.Context, *connect.Request[v1.CreateGatewayRequest]) (*connect.Response[v1.CreateGatewayResponse], error)
	DeleteGateway(context.Context, *connect.Request[v1.DeleteGatewayRequest]) (*connect.Response[v1.DeleteGatewayResponse], error)
	GetOrCreateGateway(context.Context, *connect.Request[v1.GetOrCreateGatewayRequest]) (*connect.Response[v1.GetOrCreateGatewayResponse], error)
	PublishToGateway(context.Context, *connect.Request[v1.PublishToGatewayRequest]) (*connect.Response[v1.PublishToGatewayResponse], error)
}

// NewEventHubDispatcherServiceClient constructs a client for the
// proto.shopcloud.eventhub.v1.EventHubDispatcherService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventHubDispatcherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventHubDispatcherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventHubDispatcherServiceClient{
		getWorkspace: connect.NewClient[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkspaceByName: connect.NewClient[v1.GetWorkspaceByNameRequest, v1.GetWorkspaceByNameResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetWorkspaceByNameProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetWorkspaceByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listWorkspaces: connect.NewClient[v1.ListWorkspacesRequest, v1.ListWorkspacesResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceListWorkspacesProcedure,
			connect.WithSchema(eventHubDispatcherServiceListWorkspacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWorkspace: connect.NewClient[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceCreateWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceCreateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteWorkspace: connect.NewClient[v1.DeleteWorkspaceRequest, v1.DeleteWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDeleteWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceDeleteWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrCreateWorkspace: connect.NewClient[v1.GetOrCreateWorkspaceRequest, v1.GetOrCreateWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetOrCreateWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetOrCreateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addUsersToWorkspace: connect.NewClient[v1.AddUsersToWorkspaceRequest, v1.AddUsersToWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceAddUsersToWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceAddUsersToWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeUsersFromWorkspace: connect.NewClient[v1.RemoveUsersFromWorkspaceRequest, v1.RemoveUsersFromWorkspaceResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceRemoveUsersFromWorkspaceProcedure,
			connect.WithSchema(eventHubDispatcherServiceRemoveUsersFromWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishEvent: connect.NewClient[v1.PublishEventRequest, v1.PublishEventResponse](
			httpClient,
			baseURL+EventHubDispatcherServicePublishEventProcedure,
			connect.WithSchema(eventHubDispatcherServicePublishEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dispatchEventToSubscriptions: connect.NewClient[v1.DispatchEventToSubscriptionsRequest, v1.DispatchEventToSubscriptionsResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDispatchEventToSubscriptionsProcedure,
			connect.WithSchema(eventHubDispatcherServiceDispatchEventToSubscriptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvent: connect.NewClient[v1.GetEventRequest, v1.Event](
			httpClient,
			baseURL+EventHubDispatcherServiceGetEventProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubscription: connect.NewClient[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSubscriptionByName: connect.NewClient[v1.GetSubscriptionByNameRequest, v1.GetSubscriptionByNameResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetSubscriptionByNameProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetSubscriptionByNameMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSubscriptions: connect.NewClient[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceListSubscriptionsProcedure,
			connect.WithSchema(eventHubDispatcherServiceListSubscriptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createSubscription: connect.NewClient[v1.CreateSubscriptionRequest, v1.CreateSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceCreateSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceCreateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSubscription: connect.NewClient[v1.DeleteSubscriptionRequest, v1.DeleteSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDeleteSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceDeleteSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrCreateSubscription: connect.NewClient[v1.GetOrCreateSubscriptionRequest, v1.GetOrCreateSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetOrCreateSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetOrCreateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addSubscriptionTopics: connect.NewClient[v1.AddSubscriptionTopicsRequest, v1.AddSubscriptionTopicsResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceAddSubscriptionTopicsProcedure,
			connect.WithSchema(eventHubDispatcherServiceAddSubscriptionTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeSubscriptionTopics: connect.NewClient[v1.RemoveSubscriptionTopicsRequest, v1.RemoveSubscriptionTopicsResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceRemoveSubscriptionTopicsProcedure,
			connect.WithSchema(eventHubDispatcherServiceRemoveSubscriptionTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSubscriptionTopics: connect.NewClient[v1.SetSubscriptionTopicsRequest, v1.SetSubscriptionTopicsResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceSetSubscriptionTopicsProcedure,
			connect.WithSchema(eventHubDispatcherServiceSetSubscriptionTopicsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		activateSubscription: connect.NewClient[v1.ActivateSubscriptionRequest, v1.ActivateSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceActivateSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceActivateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateSubscription: connect.NewClient[v1.DeactivateSubscriptionRequest, v1.DeactivateSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDeactivateSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceDeactivateSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseSubscription: connect.NewClient[v1.PauseSubscriptionRequest, v1.PauseSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServicePauseSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServicePauseSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resumeSubscription: connect.NewClient[v1.ResumeSubscriptionRequest, v1.ResumeSubscriptionResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceResumeSubscriptionProcedure,
			connect.WithSchema(eventHubDispatcherServiceResumeSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDelivery: connect.NewClient[v1.GetDeliveryRequest, v1.GetDeliveryResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetDeliveryProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetDeliveryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDeliveries: connect.NewClient[v1.ListDeliveriesRequest, v1.ListDeliveriesResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceListDeliveriesProcedure,
			connect.WithSchema(eventHubDispatcherServiceListDeliveriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDelivery: connect.NewClient[v1.CreateDeliveryRequest, v1.CreateDeliveryResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceCreateDeliveryProcedure,
			connect.WithSchema(eventHubDispatcherServiceCreateDeliveryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDelivery: connect.NewClient[v1.DeleteDeliveryRequest, v1.DeleteDeliveryResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDeleteDeliveryProcedure,
			connect.WithSchema(eventHubDispatcherServiceDeleteDeliveryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pushDelivery: connect.NewClient[v1.PushDeliveryRequest, v1.PushDeliveryResponse](
			httpClient,
			baseURL+EventHubDispatcherServicePushDeliveryProcedure,
			connect.WithSchema(eventHubDispatcherServicePushDeliveryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGateway: connect.NewClient[v1.GetGatewayRequest, v1.GetGatewayResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetGatewayProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGatewayByCode: connect.NewClient[v1.GetGatewayByCodeRequest, v1.GetGatewayByCodeResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetGatewayByCodeProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetGatewayByCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getGatewayByHash: connect.NewClient[v1.GetGatewayByHashRequest, v1.GetGatewayByHashResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetGatewayByHashProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetGatewayByHashMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGateways: connect.NewClient[v1.ListGatewaysRequest, v1.ListGatewaysResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceListGatewaysProcedure,
			connect.WithSchema(eventHubDispatcherServiceListGatewaysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createGateway: connect.NewClient[v1.CreateGatewayRequest, v1.CreateGatewayResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceCreateGatewayProcedure,
			connect.WithSchema(eventHubDispatcherServiceCreateGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteGateway: connect.NewClient[v1.DeleteGatewayRequest, v1.DeleteGatewayResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceDeleteGatewayProcedure,
			connect.WithSchema(eventHubDispatcherServiceDeleteGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrCreateGateway: connect.NewClient[v1.GetOrCreateGatewayRequest, v1.GetOrCreateGatewayResponse](
			httpClient,
			baseURL+EventHubDispatcherServiceGetOrCreateGatewayProcedure,
			connect.WithSchema(eventHubDispatcherServiceGetOrCreateGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishToGateway: connect.NewClient[v1.PublishToGatewayRequest, v1.PublishToGatewayResponse](
			httpClient,
			baseURL+EventHubDispatcherServicePublishToGatewayProcedure,
			connect.WithSchema(eventHubDispatcherServicePublishToGatewayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventHubDispatcherServiceClient implements EventHubDispatcherServiceClient.
type eventHubDispatcherServiceClient struct {
	getWorkspace                 *connect.Client[v1.GetWorkspaceRequest, v1.GetWorkspaceResponse]
	getWorkspaceByName           *connect.Client[v1.GetWorkspaceByNameRequest, v1.GetWorkspaceByNameResponse]
	listWorkspaces               *connect.Client[v1.ListWorkspacesRequest, v1.ListWorkspacesResponse]
	createWorkspace              *connect.Client[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse]
	deleteWorkspace              *connect.Client[v1.DeleteWorkspaceRequest, v1.DeleteWorkspaceResponse]
	getOrCreateWorkspace         *connect.Client[v1.GetOrCreateWorkspaceRequest, v1.GetOrCreateWorkspaceResponse]
	addUsersToWorkspace          *connect.Client[v1.AddUsersToWorkspaceRequest, v1.AddUsersToWorkspaceResponse]
	removeUsersFromWorkspace     *connect.Client[v1.RemoveUsersFromWorkspaceRequest, v1.RemoveUsersFromWorkspaceResponse]
	publishEvent                 *connect.Client[v1.PublishEventRequest, v1.PublishEventResponse]
	dispatchEventToSubscriptions *connect.Client[v1.DispatchEventToSubscriptionsRequest, v1.DispatchEventToSubscriptionsResponse]
	getEvent                     *connect.Client[v1.GetEventRequest, v1.Event]
	getSubscription              *connect.Client[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse]
	getSubscriptionByName        *connect.Client[v1.GetSubscriptionByNameRequest, v1.GetSubscriptionByNameResponse]
	listSubscriptions            *connect.Client[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse]
	createSubscription           *connect.Client[v1.CreateSubscriptionRequest, v1.CreateSubscriptionResponse]
	deleteSubscription           *connect.Client[v1.DeleteSubscriptionRequest, v1.DeleteSubscriptionResponse]
	getOrCreateSubscription      *connect.Client[v1.GetOrCreateSubscriptionRequest, v1.GetOrCreateSubscriptionResponse]
	addSubscriptionTopics        *connect.Client[v1.AddSubscriptionTopicsRequest, v1.AddSubscriptionTopicsResponse]
	removeSubscriptionTopics     *connect.Client[v1.RemoveSubscriptionTopicsRequest, v1.RemoveSubscriptionTopicsResponse]
	setSubscriptionTopics        *connect.Client[v1.SetSubscriptionTopicsRequest, v1.SetSubscriptionTopicsResponse]
	activateSubscription         *connect.Client[v1.ActivateSubscriptionRequest, v1.ActivateSubscriptionResponse]
	deactivateSubscription       *connect.Client[v1.DeactivateSubscriptionRequest, v1.DeactivateSubscriptionResponse]
	pauseSubscription            *connect.Client[v1.PauseSubscriptionRequest, v1.PauseSubscriptionResponse]
	resumeSubscription           *connect.Client[v1.ResumeSubscriptionRequest, v1.ResumeSubscriptionResponse]
	getDelivery                  *connect.Client[v1.GetDeliveryRequest, v1.GetDeliveryResponse]
	listDeliveries               *connect.Client[v1.ListDeliveriesRequest, v1.ListDeliveriesResponse]
	createDelivery               *connect.Client[v1.CreateDeliveryRequest, v1.CreateDeliveryResponse]
	deleteDelivery               *connect.Client[v1.DeleteDeliveryRequest, v1.DeleteDeliveryResponse]
	pushDelivery                 *connect.Client[v1.PushDeliveryRequest, v1.PushDeliveryResponse]
	getGateway                   *connect.Client[v1.GetGatewayRequest, v1.GetGatewayResponse]
	getGatewayByCode             *connect.Client[v1.GetGatewayByCodeRequest, v1.GetGatewayByCodeResponse]
	getGatewayByHash             *connect.Client[v1.GetGatewayByHashRequest, v1.GetGatewayByHashResponse]
	listGateways                 *connect.Client[v1.ListGatewaysRequest, v1.ListGatewaysResponse]
	createGateway                *connect.Client[v1.CreateGatewayRequest, v1.CreateGatewayResponse]
	deleteGateway                *connect.Client[v1.DeleteGatewayRequest, v1.DeleteGatewayResponse]
	getOrCreateGateway           *connect.Client[v1.GetOrCreateGatewayRequest, v1.GetOrCreateGatewayResponse]
	publishToGateway             *connect.Client[v1.PublishToGatewayRequest, v1.PublishToGatewayResponse]
}

// GetWorkspace calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetWorkspace.
func (c *eventHubDispatcherServiceClient) GetWorkspace(ctx context.Context, req *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return c.getWorkspace.CallUnary(ctx, req)
}

// GetWorkspaceByName calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetWorkspaceByName.
func (c *eventHubDispatcherServiceClient) GetWorkspaceByName(ctx context.Context, req *connect.Request[v1.GetWorkspaceByNameRequest]) (*connect.Response[v1.GetWorkspaceByNameResponse], error) {
	return c.getWorkspaceByName.CallUnary(ctx, req)
}

// ListWorkspaces calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListWorkspaces.
func (c *eventHubDispatcherServiceClient) ListWorkspaces(ctx context.Context, req *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error) {
	return c.listWorkspaces.CallUnary(ctx, req)
}

// CreateWorkspace calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateWorkspace.
func (c *eventHubDispatcherServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// DeleteWorkspace calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteWorkspace.
func (c *eventHubDispatcherServiceClient) DeleteWorkspace(ctx context.Context, req *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error) {
	return c.deleteWorkspace.CallUnary(ctx, req)
}

// GetOrCreateWorkspace calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateWorkspace.
func (c *eventHubDispatcherServiceClient) GetOrCreateWorkspace(ctx context.Context, req *connect.Request[v1.GetOrCreateWorkspaceRequest]) (*connect.Response[v1.GetOrCreateWorkspaceResponse], error) {
	return c.getOrCreateWorkspace.CallUnary(ctx, req)
}

// AddUsersToWorkspace calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.AddUsersToWorkspace.
func (c *eventHubDispatcherServiceClient) AddUsersToWorkspace(ctx context.Context, req *connect.Request[v1.AddUsersToWorkspaceRequest]) (*connect.Response[v1.AddUsersToWorkspaceResponse], error) {
	return c.addUsersToWorkspace.CallUnary(ctx, req)
}

// RemoveUsersFromWorkspace calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.RemoveUsersFromWorkspace.
func (c *eventHubDispatcherServiceClient) RemoveUsersFromWorkspace(ctx context.Context, req *connect.Request[v1.RemoveUsersFromWorkspaceRequest]) (*connect.Response[v1.RemoveUsersFromWorkspaceResponse], error) {
	return c.removeUsersFromWorkspace.CallUnary(ctx, req)
}

// PublishEvent calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.PublishEvent.
func (c *eventHubDispatcherServiceClient) PublishEvent(ctx context.Context, req *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error) {
	return c.publishEvent.CallUnary(ctx, req)
}

// DispatchEventToSubscriptions calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.DispatchEventToSubscriptions.
func (c *eventHubDispatcherServiceClient) DispatchEventToSubscriptions(ctx context.Context, req *connect.Request[v1.DispatchEventToSubscriptionsRequest]) (*connect.Response[v1.DispatchEventToSubscriptionsResponse], error) {
	return c.dispatchEventToSubscriptions.CallUnary(ctx, req)
}

// GetEvent calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetEvent.
func (c *eventHubDispatcherServiceClient) GetEvent(ctx context.Context, req *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.Event], error) {
	return c.getEvent.CallUnary(ctx, req)
}

// GetSubscription calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetSubscription.
func (c *eventHubDispatcherServiceClient) GetSubscription(ctx context.Context, req *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// GetSubscriptionByName calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetSubscriptionByName.
func (c *eventHubDispatcherServiceClient) GetSubscriptionByName(ctx context.Context, req *connect.Request[v1.GetSubscriptionByNameRequest]) (*connect.Response[v1.GetSubscriptionByNameResponse], error) {
	return c.getSubscriptionByName.CallUnary(ctx, req)
}

// ListSubscriptions calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListSubscriptions.
func (c *eventHubDispatcherServiceClient) ListSubscriptions(ctx context.Context, req *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// CreateSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateSubscription.
func (c *eventHubDispatcherServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// DeleteSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteSubscription.
func (c *eventHubDispatcherServiceClient) DeleteSubscription(ctx context.Context, req *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error) {
	return c.deleteSubscription.CallUnary(ctx, req)
}

// GetOrCreateSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateSubscription.
func (c *eventHubDispatcherServiceClient) GetOrCreateSubscription(ctx context.Context, req *connect.Request[v1.GetOrCreateSubscriptionRequest]) (*connect.Response[v1.GetOrCreateSubscriptionResponse], error) {
	return c.getOrCreateSubscription.CallUnary(ctx, req)
}

// AddSubscriptionTopics calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.AddSubscriptionTopics.
func (c *eventHubDispatcherServiceClient) AddSubscriptionTopics(ctx context.Context, req *connect.Request[v1.AddSubscriptionTopicsRequest]) (*connect.Response[v1.AddSubscriptionTopicsResponse], error) {
	return c.addSubscriptionTopics.CallUnary(ctx, req)
}

// RemoveSubscriptionTopics calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.RemoveSubscriptionTopics.
func (c *eventHubDispatcherServiceClient) RemoveSubscriptionTopics(ctx context.Context, req *connect.Request[v1.RemoveSubscriptionTopicsRequest]) (*connect.Response[v1.RemoveSubscriptionTopicsResponse], error) {
	return c.removeSubscriptionTopics.CallUnary(ctx, req)
}

// SetSubscriptionTopics calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.SetSubscriptionTopics.
func (c *eventHubDispatcherServiceClient) SetSubscriptionTopics(ctx context.Context, req *connect.Request[v1.SetSubscriptionTopicsRequest]) (*connect.Response[v1.SetSubscriptionTopicsResponse], error) {
	return c.setSubscriptionTopics.CallUnary(ctx, req)
}

// ActivateSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.ActivateSubscription.
func (c *eventHubDispatcherServiceClient) ActivateSubscription(ctx context.Context, req *connect.Request[v1.ActivateSubscriptionRequest]) (*connect.Response[v1.ActivateSubscriptionResponse], error) {
	return c.activateSubscription.CallUnary(ctx, req)
}

// DeactivateSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeactivateSubscription.
func (c *eventHubDispatcherServiceClient) DeactivateSubscription(ctx context.Context, req *connect.Request[v1.DeactivateSubscriptionRequest]) (*connect.Response[v1.DeactivateSubscriptionResponse], error) {
	return c.deactivateSubscription.CallUnary(ctx, req)
}

// PauseSubscription calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.PauseSubscription.
func (c *eventHubDispatcherServiceClient) PauseSubscription(ctx context.Context, req *connect.Request[v1.PauseSubscriptionRequest]) (*connect.Response[v1.PauseSubscriptionResponse], error) {
	return c.pauseSubscription.CallUnary(ctx, req)
}

// ResumeSubscription calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.ResumeSubscription.
func (c *eventHubDispatcherServiceClient) ResumeSubscription(ctx context.Context, req *connect.Request[v1.ResumeSubscriptionRequest]) (*connect.Response[v1.ResumeSubscriptionResponse], error) {
	return c.resumeSubscription.CallUnary(ctx, req)
}

// GetDelivery calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetDelivery.
func (c *eventHubDispatcherServiceClient) GetDelivery(ctx context.Context, req *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error) {
	return c.getDelivery.CallUnary(ctx, req)
}

// ListDeliveries calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListDeliveries.
func (c *eventHubDispatcherServiceClient) ListDeliveries(ctx context.Context, req *connect.Request[v1.ListDeliveriesRequest]) (*connect.Response[v1.ListDeliveriesResponse], error) {
	return c.listDeliveries.CallUnary(ctx, req)
}

// CreateDelivery calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateDelivery.
func (c *eventHubDispatcherServiceClient) CreateDelivery(ctx context.Context, req *connect.Request[v1.CreateDeliveryRequest]) (*connect.Response[v1.CreateDeliveryResponse], error) {
	return c.createDelivery.CallUnary(ctx, req)
}

// DeleteDelivery calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteDelivery.
func (c *eventHubDispatcherServiceClient) DeleteDelivery(ctx context.Context, req *connect.Request[v1.DeleteDeliveryRequest]) (*connect.Response[v1.DeleteDeliveryResponse], error) {
	return c.deleteDelivery.CallUnary(ctx, req)
}

// PushDelivery calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.PushDelivery.
func (c *eventHubDispatcherServiceClient) PushDelivery(ctx context.Context, req *connect.Request[v1.PushDeliveryRequest]) (*connect.Response[v1.PushDeliveryResponse], error) {
	return c.pushDelivery.CallUnary(ctx, req)
}

// GetGateway calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGateway.
func (c *eventHubDispatcherServiceClient) GetGateway(ctx context.Context, req *connect.Request[v1.GetGatewayRequest]) (*connect.Response[v1.GetGatewayResponse], error) {
	return c.getGateway.CallUnary(ctx, req)
}

// GetGatewayByCode calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGatewayByCode.
func (c *eventHubDispatcherServiceClient) GetGatewayByCode(ctx context.Context, req *connect.Request[v1.GetGatewayByCodeRequest]) (*connect.Response[v1.GetGatewayByCodeResponse], error) {
	return c.getGatewayByCode.CallUnary(ctx, req)
}

// GetGatewayByHash calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGatewayByHash.
func (c *eventHubDispatcherServiceClient) GetGatewayByHash(ctx context.Context, req *connect.Request[v1.GetGatewayByHashRequest]) (*connect.Response[v1.GetGatewayByHashResponse], error) {
	return c.getGatewayByHash.CallUnary(ctx, req)
}

// ListGateways calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListGateways.
func (c *eventHubDispatcherServiceClient) ListGateways(ctx context.Context, req *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error) {
	return c.listGateways.CallUnary(ctx, req)
}

// CreateGateway calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateGateway.
func (c *eventHubDispatcherServiceClient) CreateGateway(ctx context.Context, req *connect.Request[v1.CreateGatewayRequest]) (*connect.Response[v1.CreateGatewayResponse], error) {
	return c.createGateway.CallUnary(ctx, req)
}

// DeleteGateway calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteGateway.
func (c *eventHubDispatcherServiceClient) DeleteGateway(ctx context.Context, req *connect.Request[v1.DeleteGatewayRequest]) (*connect.Response[v1.DeleteGatewayResponse], error) {
	return c.deleteGateway.CallUnary(ctx, req)
}

// GetOrCreateGateway calls
// proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateGateway.
func (c *eventHubDispatcherServiceClient) GetOrCreateGateway(ctx context.Context, req *connect.Request[v1.GetOrCreateGatewayRequest]) (*connect.Response[v1.GetOrCreateGatewayResponse], error) {
	return c.getOrCreateGateway.CallUnary(ctx, req)
}

// PublishToGateway calls proto.shopcloud.eventhub.v1.EventHubDispatcherService.PublishToGateway.
func (c *eventHubDispatcherServiceClient) PublishToGateway(ctx context.Context, req *connect.Request[v1.PublishToGatewayRequest]) (*connect.Response[v1.PublishToGatewayResponse], error) {
	return c.publishToGateway.CallUnary(ctx, req)
}

// EventHubDispatcherServiceHandler is an implementation of the
// proto.shopcloud.eventhub.v1.EventHubDispatcherService service.
type EventHubDispatcherServiceHandler interface {
	// Workspace
	GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error)
	GetWorkspaceByName(context.Context, *connect.Request[v1.GetWorkspaceByNameRequest]) (*connect.Response[v1.GetWorkspaceByNameResponse], error)
	ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error)
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error)
	GetOrCreateWorkspace(context.Context, *connect.Request[v1.GetOrCreateWorkspaceRequest]) (*connect.Response[v1.GetOrCreateWorkspaceResponse], error)
	AddUsersToWorkspace(context.Context, *connect.Request[v1.AddUsersToWorkspaceRequest]) (*connect.Response[v1.AddUsersToWorkspaceResponse], error)
	RemoveUsersFromWorkspace(context.Context, *connect.Request[v1.RemoveUsersFromWorkspaceRequest]) (*connect.Response[v1.RemoveUsersFromWorkspaceResponse], error)
	// Event
	PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error)
	DispatchEventToSubscriptions(context.Context, *connect.Request[v1.DispatchEventToSubscriptionsRequest]) (*connect.Response[v1.DispatchEventToSubscriptionsResponse], error)
	GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.Event], error)
	// Subscription
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	GetSubscriptionByName(context.Context, *connect.Request[v1.GetSubscriptionByNameRequest]) (*connect.Response[v1.GetSubscriptionByNameResponse], error)
	ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error)
	GetOrCreateSubscription(context.Context, *connect.Request[v1.GetOrCreateSubscriptionRequest]) (*connect.Response[v1.GetOrCreateSubscriptionResponse], error)
	AddSubscriptionTopics(context.Context, *connect.Request[v1.AddSubscriptionTopicsRequest]) (*connect.Response[v1.AddSubscriptionTopicsResponse], error)
	RemoveSubscriptionTopics(context.Context, *connect.Request[v1.RemoveSubscriptionTopicsRequest]) (*connect.Response[v1.RemoveSubscriptionTopicsResponse], error)
	SetSubscriptionTopics(context.Context, *connect.Request[v1.SetSubscriptionTopicsRequest]) (*connect.Response[v1.SetSubscriptionTopicsResponse], error)
	ActivateSubscription(context.Context, *connect.Request[v1.ActivateSubscriptionRequest]) (*connect.Response[v1.ActivateSubscriptionResponse], error)
	DeactivateSubscription(context.Context, *connect.Request[v1.DeactivateSubscriptionRequest]) (*connect.Response[v1.DeactivateSubscriptionResponse], error)
	PauseSubscription(context.Context, *connect.Request[v1.PauseSubscriptionRequest]) (*connect.Response[v1.PauseSubscriptionResponse], error)
	ResumeSubscription(context.Context, *connect.Request[v1.ResumeSubscriptionRequest]) (*connect.Response[v1.ResumeSubscriptionResponse], error)
	// Delivery
	GetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error)
	ListDeliveries(context.Context, *connect.Request[v1.ListDeliveriesRequest]) (*connect.Response[v1.ListDeliveriesResponse], error)
	CreateDelivery(context.Context, *connect.Request[v1.CreateDeliveryRequest]) (*connect.Response[v1.CreateDeliveryResponse], error)
	DeleteDelivery(context.Context, *connect.Request[v1.DeleteDeliveryRequest]) (*connect.Response[v1.DeleteDeliveryResponse], error)
	PushDelivery(context.Context, *connect.Request[v1.PushDeliveryRequest]) (*connect.Response[v1.PushDeliveryResponse], error)
	// Gateway
	GetGateway(context.Context, *connect.Request[v1.GetGatewayRequest]) (*connect.Response[v1.GetGatewayResponse], error)
	GetGatewayByCode(context.Context, *connect.Request[v1.GetGatewayByCodeRequest]) (*connect.Response[v1.GetGatewayByCodeResponse], error)
	GetGatewayByHash(context.Context, *connect.Request[v1.GetGatewayByHashRequest]) (*connect.Response[v1.GetGatewayByHashResponse], error)
	ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error)
	CreateGateway(context.Context, *connect.Request[v1.CreateGatewayRequest]) (*connect.Response[v1.CreateGatewayResponse], error)
	DeleteGateway(context.Context, *connect.Request[v1.DeleteGatewayRequest]) (*connect.Response[v1.DeleteGatewayResponse], error)
	GetOrCreateGateway(context.Context, *connect.Request[v1.GetOrCreateGatewayRequest]) (*connect.Response[v1.GetOrCreateGatewayResponse], error)
	PublishToGateway(context.Context, *connect.Request[v1.PublishToGatewayRequest]) (*connect.Response[v1.PublishToGatewayResponse], error)
}

// NewEventHubDispatcherServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventHubDispatcherServiceHandler(svc EventHubDispatcherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventHubDispatcherServiceGetWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetWorkspaceProcedure,
		svc.GetWorkspace,
		connect.WithSchema(eventHubDispatcherServiceGetWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetWorkspaceByNameHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetWorkspaceByNameProcedure,
		svc.GetWorkspaceByName,
		connect.WithSchema(eventHubDispatcherServiceGetWorkspaceByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceListWorkspacesHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceListWorkspacesProcedure,
		svc.ListWorkspaces,
		connect.WithSchema(eventHubDispatcherServiceListWorkspacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(eventHubDispatcherServiceCreateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDeleteWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDeleteWorkspaceProcedure,
		svc.DeleteWorkspace,
		connect.WithSchema(eventHubDispatcherServiceDeleteWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetOrCreateWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetOrCreateWorkspaceProcedure,
		svc.GetOrCreateWorkspace,
		connect.WithSchema(eventHubDispatcherServiceGetOrCreateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceAddUsersToWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceAddUsersToWorkspaceProcedure,
		svc.AddUsersToWorkspace,
		connect.WithSchema(eventHubDispatcherServiceAddUsersToWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceRemoveUsersFromWorkspaceHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceRemoveUsersFromWorkspaceProcedure,
		svc.RemoveUsersFromWorkspace,
		connect.WithSchema(eventHubDispatcherServiceRemoveUsersFromWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServicePublishEventHandler := connect.NewUnaryHandler(
		EventHubDispatcherServicePublishEventProcedure,
		svc.PublishEvent,
		connect.WithSchema(eventHubDispatcherServicePublishEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDispatchEventToSubscriptionsHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDispatchEventToSubscriptionsProcedure,
		svc.DispatchEventToSubscriptions,
		connect.WithSchema(eventHubDispatcherServiceDispatchEventToSubscriptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetEventHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetEventProcedure,
		svc.GetEvent,
		connect.WithSchema(eventHubDispatcherServiceGetEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(eventHubDispatcherServiceGetSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetSubscriptionByNameHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetSubscriptionByNameProcedure,
		svc.GetSubscriptionByName,
		connect.WithSchema(eventHubDispatcherServiceGetSubscriptionByNameMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceListSubscriptionsHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		connect.WithSchema(eventHubDispatcherServiceListSubscriptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(eventHubDispatcherServiceCreateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDeleteSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDeleteSubscriptionProcedure,
		svc.DeleteSubscription,
		connect.WithSchema(eventHubDispatcherServiceDeleteSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetOrCreateSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetOrCreateSubscriptionProcedure,
		svc.GetOrCreateSubscription,
		connect.WithSchema(eventHubDispatcherServiceGetOrCreateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceAddSubscriptionTopicsHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceAddSubscriptionTopicsProcedure,
		svc.AddSubscriptionTopics,
		connect.WithSchema(eventHubDispatcherServiceAddSubscriptionTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceRemoveSubscriptionTopicsHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceRemoveSubscriptionTopicsProcedure,
		svc.RemoveSubscriptionTopics,
		connect.WithSchema(eventHubDispatcherServiceRemoveSubscriptionTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceSetSubscriptionTopicsHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceSetSubscriptionTopicsProcedure,
		svc.SetSubscriptionTopics,
		connect.WithSchema(eventHubDispatcherServiceSetSubscriptionTopicsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceActivateSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceActivateSubscriptionProcedure,
		svc.ActivateSubscription,
		connect.WithSchema(eventHubDispatcherServiceActivateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDeactivateSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDeactivateSubscriptionProcedure,
		svc.DeactivateSubscription,
		connect.WithSchema(eventHubDispatcherServiceDeactivateSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServicePauseSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServicePauseSubscriptionProcedure,
		svc.PauseSubscription,
		connect.WithSchema(eventHubDispatcherServicePauseSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceResumeSubscriptionHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceResumeSubscriptionProcedure,
		svc.ResumeSubscription,
		connect.WithSchema(eventHubDispatcherServiceResumeSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetDeliveryHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetDeliveryProcedure,
		svc.GetDelivery,
		connect.WithSchema(eventHubDispatcherServiceGetDeliveryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceListDeliveriesHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceListDeliveriesProcedure,
		svc.ListDeliveries,
		connect.WithSchema(eventHubDispatcherServiceListDeliveriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceCreateDeliveryHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceCreateDeliveryProcedure,
		svc.CreateDelivery,
		connect.WithSchema(eventHubDispatcherServiceCreateDeliveryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDeleteDeliveryHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDeleteDeliveryProcedure,
		svc.DeleteDelivery,
		connect.WithSchema(eventHubDispatcherServiceDeleteDeliveryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServicePushDeliveryHandler := connect.NewUnaryHandler(
		EventHubDispatcherServicePushDeliveryProcedure,
		svc.PushDelivery,
		connect.WithSchema(eventHubDispatcherServicePushDeliveryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetGatewayHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetGatewayProcedure,
		svc.GetGateway,
		connect.WithSchema(eventHubDispatcherServiceGetGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetGatewayByCodeHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetGatewayByCodeProcedure,
		svc.GetGatewayByCode,
		connect.WithSchema(eventHubDispatcherServiceGetGatewayByCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetGatewayByHashHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetGatewayByHashProcedure,
		svc.GetGatewayByHash,
		connect.WithSchema(eventHubDispatcherServiceGetGatewayByHashMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceListGatewaysHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceListGatewaysProcedure,
		svc.ListGateways,
		connect.WithSchema(eventHubDispatcherServiceListGatewaysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceCreateGatewayHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceCreateGatewayProcedure,
		svc.CreateGateway,
		connect.WithSchema(eventHubDispatcherServiceCreateGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceDeleteGatewayHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceDeleteGatewayProcedure,
		svc.DeleteGateway,
		connect.WithSchema(eventHubDispatcherServiceDeleteGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServiceGetOrCreateGatewayHandler := connect.NewUnaryHandler(
		EventHubDispatcherServiceGetOrCreateGatewayProcedure,
		svc.GetOrCreateGateway,
		connect.WithSchema(eventHubDispatcherServiceGetOrCreateGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventHubDispatcherServicePublishToGatewayHandler := connect.NewUnaryHandler(
		EventHubDispatcherServicePublishToGatewayProcedure,
		svc.PublishToGateway,
		connect.WithSchema(eventHubDispatcherServicePublishToGatewayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.shopcloud.eventhub.v1.EventHubDispatcherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventHubDispatcherServiceGetWorkspaceProcedure:
			eventHubDispatcherServiceGetWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetWorkspaceByNameProcedure:
			eventHubDispatcherServiceGetWorkspaceByNameHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceListWorkspacesProcedure:
			eventHubDispatcherServiceListWorkspacesHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceCreateWorkspaceProcedure:
			eventHubDispatcherServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDeleteWorkspaceProcedure:
			eventHubDispatcherServiceDeleteWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetOrCreateWorkspaceProcedure:
			eventHubDispatcherServiceGetOrCreateWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceAddUsersToWorkspaceProcedure:
			eventHubDispatcherServiceAddUsersToWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceRemoveUsersFromWorkspaceProcedure:
			eventHubDispatcherServiceRemoveUsersFromWorkspaceHandler.ServeHTTP(w, r)
		case EventHubDispatcherServicePublishEventProcedure:
			eventHubDispatcherServicePublishEventHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDispatchEventToSubscriptionsProcedure:
			eventHubDispatcherServiceDispatchEventToSubscriptionsHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetEventProcedure:
			eventHubDispatcherServiceGetEventHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetSubscriptionProcedure:
			eventHubDispatcherServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetSubscriptionByNameProcedure:
			eventHubDispatcherServiceGetSubscriptionByNameHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceListSubscriptionsProcedure:
			eventHubDispatcherServiceListSubscriptionsHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceCreateSubscriptionProcedure:
			eventHubDispatcherServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDeleteSubscriptionProcedure:
			eventHubDispatcherServiceDeleteSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetOrCreateSubscriptionProcedure:
			eventHubDispatcherServiceGetOrCreateSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceAddSubscriptionTopicsProcedure:
			eventHubDispatcherServiceAddSubscriptionTopicsHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceRemoveSubscriptionTopicsProcedure:
			eventHubDispatcherServiceRemoveSubscriptionTopicsHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceSetSubscriptionTopicsProcedure:
			eventHubDispatcherServiceSetSubscriptionTopicsHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceActivateSubscriptionProcedure:
			eventHubDispatcherServiceActivateSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDeactivateSubscriptionProcedure:
			eventHubDispatcherServiceDeactivateSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServicePauseSubscriptionProcedure:
			eventHubDispatcherServicePauseSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceResumeSubscriptionProcedure:
			eventHubDispatcherServiceResumeSubscriptionHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetDeliveryProcedure:
			eventHubDispatcherServiceGetDeliveryHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceListDeliveriesProcedure:
			eventHubDispatcherServiceListDeliveriesHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceCreateDeliveryProcedure:
			eventHubDispatcherServiceCreateDeliveryHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDeleteDeliveryProcedure:
			eventHubDispatcherServiceDeleteDeliveryHandler.ServeHTTP(w, r)
		case EventHubDispatcherServicePushDeliveryProcedure:
			eventHubDispatcherServicePushDeliveryHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetGatewayProcedure:
			eventHubDispatcherServiceGetGatewayHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetGatewayByCodeProcedure:
			eventHubDispatcherServiceGetGatewayByCodeHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetGatewayByHashProcedure:
			eventHubDispatcherServiceGetGatewayByHashHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceListGatewaysProcedure:
			eventHubDispatcherServiceListGatewaysHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceCreateGatewayProcedure:
			eventHubDispatcherServiceCreateGatewayHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceDeleteGatewayProcedure:
			eventHubDispatcherServiceDeleteGatewayHandler.ServeHTTP(w, r)
		case EventHubDispatcherServiceGetOrCreateGatewayProcedure:
			eventHubDispatcherServiceGetOrCreateGatewayHandler.ServeHTTP(w, r)
		case EventHubDispatcherServicePublishToGatewayProcedure:
			eventHubDispatcherServicePublishToGatewayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventHubDispatcherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventHubDispatcherServiceHandler struct{}

func (UnimplementedEventHubDispatcherServiceHandler) GetWorkspace(context.Context, *connect.Request[v1.GetWorkspaceRequest]) (*connect.Response[v1.GetWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetWorkspaceByName(context.Context, *connect.Request[v1.GetWorkspaceByNameRequest]) (*connect.Response[v1.GetWorkspaceByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetWorkspaceByName is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ListWorkspaces(context.Context, *connect.Request[v1.ListWorkspacesRequest]) (*connect.Response[v1.ListWorkspacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListWorkspaces is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DeleteWorkspace(context.Context, *connect.Request[v1.DeleteWorkspaceRequest]) (*connect.Response[v1.DeleteWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetOrCreateWorkspace(context.Context, *connect.Request[v1.GetOrCreateWorkspaceRequest]) (*connect.Response[v1.GetOrCreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) AddUsersToWorkspace(context.Context, *connect.Request[v1.AddUsersToWorkspaceRequest]) (*connect.Response[v1.AddUsersToWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.AddUsersToWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) RemoveUsersFromWorkspace(context.Context, *connect.Request[v1.RemoveUsersFromWorkspaceRequest]) (*connect.Response[v1.RemoveUsersFromWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.RemoveUsersFromWorkspace is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) PublishEvent(context.Context, *connect.Request[v1.PublishEventRequest]) (*connect.Response[v1.PublishEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.PublishEvent is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DispatchEventToSubscriptions(context.Context, *connect.Request[v1.DispatchEventToSubscriptionsRequest]) (*connect.Response[v1.DispatchEventToSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DispatchEventToSubscriptions is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetEvent(context.Context, *connect.Request[v1.GetEventRequest]) (*connect.Response[v1.Event], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetEvent is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetSubscriptionByName(context.Context, *connect.Request[v1.GetSubscriptionByNameRequest]) (*connect.Response[v1.GetSubscriptionByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetSubscriptionByName is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListSubscriptions is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionRequest]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DeleteSubscription(context.Context, *connect.Request[v1.DeleteSubscriptionRequest]) (*connect.Response[v1.DeleteSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetOrCreateSubscription(context.Context, *connect.Request[v1.GetOrCreateSubscriptionRequest]) (*connect.Response[v1.GetOrCreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) AddSubscriptionTopics(context.Context, *connect.Request[v1.AddSubscriptionTopicsRequest]) (*connect.Response[v1.AddSubscriptionTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.AddSubscriptionTopics is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) RemoveSubscriptionTopics(context.Context, *connect.Request[v1.RemoveSubscriptionTopicsRequest]) (*connect.Response[v1.RemoveSubscriptionTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.RemoveSubscriptionTopics is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) SetSubscriptionTopics(context.Context, *connect.Request[v1.SetSubscriptionTopicsRequest]) (*connect.Response[v1.SetSubscriptionTopicsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.SetSubscriptionTopics is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ActivateSubscription(context.Context, *connect.Request[v1.ActivateSubscriptionRequest]) (*connect.Response[v1.ActivateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ActivateSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DeactivateSubscription(context.Context, *connect.Request[v1.DeactivateSubscriptionRequest]) (*connect.Response[v1.DeactivateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeactivateSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) PauseSubscription(context.Context, *connect.Request[v1.PauseSubscriptionRequest]) (*connect.Response[v1.PauseSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.PauseSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ResumeSubscription(context.Context, *connect.Request[v1.ResumeSubscriptionRequest]) (*connect.Response[v1.ResumeSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ResumeSubscription is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetDelivery is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ListDeliveries(context.Context, *connect.Request[v1.ListDeliveriesRequest]) (*connect.Response[v1.ListDeliveriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListDeliveries is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) CreateDelivery(context.Context, *connect.Request[v1.CreateDeliveryRequest]) (*connect.Response[v1.CreateDeliveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateDelivery is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DeleteDelivery(context.Context, *connect.Request[v1.DeleteDeliveryRequest]) (*connect.Response[v1.DeleteDeliveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteDelivery is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) PushDelivery(context.Context, *connect.Request[v1.PushDeliveryRequest]) (*connect.Response[v1.PushDeliveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.PushDelivery is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetGateway(context.Context, *connect.Request[v1.GetGatewayRequest]) (*connect.Response[v1.GetGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGateway is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetGatewayByCode(context.Context, *connect.Request[v1.GetGatewayByCodeRequest]) (*connect.Response[v1.GetGatewayByCodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGatewayByCode is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetGatewayByHash(context.Context, *connect.Request[v1.GetGatewayByHashRequest]) (*connect.Response[v1.GetGatewayByHashResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetGatewayByHash is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) ListGateways(context.Context, *connect.Request[v1.ListGatewaysRequest]) (*connect.Response[v1.ListGatewaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.ListGateways is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) CreateGateway(context.Context, *connect.Request[v1.CreateGatewayRequest]) (*connect.Response[v1.CreateGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.CreateGateway is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) DeleteGateway(context.Context, *connect.Request[v1.DeleteGatewayRequest]) (*connect.Response[v1.DeleteGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.DeleteGateway is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) GetOrCreateGateway(context.Context, *connect.Request[v1.GetOrCreateGatewayRequest]) (*connect.Response[v1.GetOrCreateGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.GetOrCreateGateway is not implemented"))
}

func (UnimplementedEventHubDispatcherServiceHandler) PublishToGateway(context.Context, *connect.Request[v1.PublishToGatewayRequest]) (*connect.Response[v1.PublishToGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.shopcloud.eventhub.v1.EventHubDispatcherService.PublishToGateway is not implemented"))
}
